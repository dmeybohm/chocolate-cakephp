package com.daveme.chocolateCakePHP.model

import com.daveme.chocolateCakePHP.*
import com.intellij.codeInsight.completion.*
import com.intellij.codeInsight.lookup.LookupElementBuilder
import com.intellij.psi.util.PsiTreeUtil
import com.intellij.util.ProcessingContext
import com.jetbrains.php.PhpIndex
import com.intellij.patterns.PlatformPatterns.psiElement
import com.intellij.psi.impl.source.tree.LeafPsiElement
import com.jetbrains.php.lang.psi.elements.*
import com.jetbrains.php.lang.psi.resolve.types.PhpType

class CustomFinderCompletionContributor : CompletionContributor() {
    init {
        val completionProvider = CustomFinderCompletionProvider()

        // When typing $table->find(' or $this->fetchTable("Movies"->find(', with a quote
        val stringLiteralPattern = psiElement(LeafPsiElement::class.java)
            .withParent(
                psiElement(StringLiteralExpression::class.java)
                    .withParent(
                        psiElement(ParameterList::class.java)
                            .withParent(
                                psiElement(MethodReference::class.java)
                                    .with(FindMethodPattern)
                            )
                    )
            )

        extend(
            CompletionType.BASIC,
            stringLiteralPattern,
            completionProvider,
        )
        extend(
            CompletionType.SMART,
            stringLiteralPattern,
            completionProvider,
        )
    }

    class CustomFinderCompletionProvider : CompletionProvider<CompletionParameters>() {
        override fun addCompletions(
            completionParameters: CompletionParameters,
            context: ProcessingContext,
            completionResultSet: CompletionResultSet
        ) {
            val methodReference = PsiTreeUtil.getParentOfType(
                completionParameters.position,
                MethodReference::class.java
            ) ?: return

            val settings =
                Settings.getInstance(methodReference.project)
            if (!settings.cake3Enabled) {
                return
            }

            val project = methodReference.project
            val phpIndex = PhpIndex.getInstance(project)
            val classReference = methodReference.classReference ?: return

            val type = classReference.type.lookupCompleteType(project, phpIndex, null)
            if (!hasRequiredType(type)) {
                return
            }
            val tableClasses = type.types.filter {
                it.startsWith("\\") && it.isAnyTableClass()
            }
            tableClasses.asSequence()
                .map { className ->
                    val replacedName = className.unwrapFromPluginSpecificTypeForQueryBuilder()
                    replacedName
                }
                .flatMap { className ->
                    phpIndex.getClassesByFQN(className)
                }
                .flatMap { klass ->
                    klass.methods
                }
                .filter { method ->
                    method.name.startsWith("find", ignoreCase = true) &&
                            method.name.length > 4 &&
                            // already generated by another completion contributor
                            // for default arguments:
                            !method.name.equals("findAll", ignoreCase = true)
                }
                .filter { method ->
                    val methodType = method.type.lookupCompleteType(project, phpIndex, null)
                    methodType.types.any { it.contains("Query", ignoreCase = true) }
                }
                .map { method ->
                        val targetName = method.name
                            .removeFromStart("find", ignoreCase = true)
                            .replaceFirstChar { it.lowercase() }
                        val lookupElement = LookupElementBuilder.create(targetName)
                            .withTypeText("string")
                        completionResultSet.addElement(lookupElement)
                }
                .lastOrNull()

        }

        private fun hasRequiredType(type: PhpType): Boolean {
            return type.types.any {
                it.isAnyTableClass() ||
                        it.isQueryObject()
            }
        }
    }
}